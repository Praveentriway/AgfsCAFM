package com.daemon.emco_android.fragments.preventive;

import android.Manifest;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.content.ContentResolver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.ThumbnailUtils;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.CoordinatorLayout;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.afollestad.materialdialogs.DialogAction;
import com.afollestad.materialdialogs.MaterialDialog;
import com.afollestad.materialdialogs.StackingBehavior;
import com.daemon.emco_android.MyApplication;
import com.daemon.emco_android.R;
import com.daemon.emco_android.activities.BarcodeCaptureActivity;
import com.daemon.emco_android.asyncprocess.PPMScheduleBy_Service;
import com.daemon.emco_android.asyncprocess.ReceiveComplaintRespond_Service;
import com.daemon.emco_android.asyncprocess.ReceiveComplaintView_Service;
import com.daemon.emco_android.db.dbhelper.DefectDoneImageDbInitializer;
import com.daemon.emco_android.db.dbhelper.RCAssetDetailsDbInitializer;
import com.daemon.emco_android.db.entity.AssetDetailsEntity;
import com.daemon.emco_android.db.entity.DFoundWDoneImageEntity;
import com.daemon.emco_android.db.entity.ReceiveComplaintRespondEntity;
import com.daemon.emco_android.db.entity.ReceiveComplaintViewEntity;
import com.daemon.emco_android.fragments.Fragment_ImagePicker;
import com.daemon.emco_android.fragments.Fragment_ImageView;
import com.daemon.emco_android.fragments.Fragment_Main;
import com.daemon.emco_android.listeners.DefectDoneImage_Listener;
import com.daemon.emco_android.listeners.ImagePickListener;
import com.daemon.emco_android.listeners.ReceivecomplaintView_Listener;
import com.daemon.emco_android.model.Login;
import com.daemon.emco_android.model.PpmScheduleDocBy;
import com.daemon.emco_android.model.request.AssetDetailsRequest;
import com.daemon.emco_android.model.request.PpmScheduleDocByRequest;
import com.daemon.emco_android.model.request.RCDownloadImageRequest;
import com.daemon.emco_android.model.response.DefectDoneImageUploaded;
import com.daemon.emco_android.model.response.RCDownloadImage;
import com.daemon.emco_android.utils.AppUtils;
import com.daemon.emco_android.utils.Font;
import com.daemon.emco_android.utils.ImageUtil;
import com.daemon.emco_android.utils.Utils;
import com.google.android.gms.common.api.CommonStatusCodes;
import com.google.android.gms.vision.barcode.Barcode;
import com.google.gson.Gson;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class Fragment_PM_PPMDetails_View extends Fragment
        implements PPMScheduleBy_Service.Listener, ReceivecomplaintView_Listener, ImagePickListener, DefectDoneImage_Listener {
    private static final String TAG = Fragment_PM_PPMDetails_View.class.getSimpleName();
    private static final int RC_BARCODE_CAPTURE = 9001;
    private final int REQUEST_WRITE_EXTERNAL_STORAGE = 4;
    private final int REQUEST_READ_EXTERNAL_STORAGE = 5;
    private final int REQUEST_CHOOSE_PHOTO = 2;
    private final int REQUEST_TAKE_PHOTO = 1;
    private final int THUMBNAIL_SIZE = 75;
    public Bundle mSavedInstanceState;
    private AppCompatActivity mActivity;
    private Font font = MyApplication.getInstance().getFontInstance();
    private SharedPreferences mPreferences;
    private SharedPreferences.Editor mEditor;
    private FragmentManager mManager;
    private Bundle mArgs;
    private CoordinatorLayout cl_main;
    private PpmScheduleDocByRequest ppmScheduleDocByRequest;
    private ImageView iv_workdone;
    private ProgressBar pb_workdone;
    private boolean isIvDefectFound = false;
    private Bitmap mImageToBeAttachedDefectFound;
    private boolean isPermissionGranted = false;
    private String mImagePathToBeAttached;
    private ImageLoader imageLoader;
    private CharSequence[] items;
    private ReceiveComplaintRespond_Service receiveComplaintRespond_service;
    private TextView tv_lbl_job_no,
            tv_job_no,
            tv_lbl_site_name,
            tv_site_name,
            tv_lbl_location,
            tv_location,
            tv_lbl_zone_area,
            tv_zone_area;
    private TextView tv_lbl_nature,
            tv_nature,
            tv_lbl_startdate,
            tv_startdate,
            tv_lbl_enddate,
            tv_enddate,
            tv_lbl_assetcode;
    private TextView tv_lbl_model, tv_model, tv_lbl_make, tv_make, tv_lbl_assettype, tv_assettype;
    private EditText tv_assetcode;

    private Button btn_save, btn_barcode_scan, btn_ppm_checklist;
    private Toolbar mToolbar;
    private View rootView;
    private PpmScheduleDocBy ppmScheduleDocBy;
    private PpmScheduleDocBy PpmScheduleDocByUpdate;
    private List<AssetDetailsEntity> assetDetailsEntitiesUp;
    private AssetDetailsEntity assetDetailsEntity;
    private boolean checkImageLoad = false;
    private String mNetworkInfo = null;
    private String mStrEmpId = null;
    View.OnClickListener _OnClickListener =
            new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Log.d(TAG, "onClick");
                    AppUtils.closeInput(cl_main);
                    switch (v.getId()) {
                        case R.id.btn_ppm_checklist:
                            gotoNextPage();
                            break;

                        case R.id.btn_save:
                            // submitForm();
                            AppUtils.showProgressDialog(
                                    mActivity, getString(R.string.lbl_image_uploading), false);
                            new Handler()
                                    .postDelayed(
                                            new Runnable() {

                        /*
                         * Showing splash screen with a timer. This will be useful when you
                         * want to show case your app logo / company
                         */

                                                @Override
                                                public void run() {
                                                    // This method will be executed once the timer is over
                                                    submitImage("B");
                                                }
                                            },
                                            1000);
                            break;

                        case R.id.btn_barcode_scan:
                            int requestId = AppUtils.getIdForRequestedCamera(AppUtils.CAMERA_FACING_BACK);
                            if (requestId == -1)
                                AppUtils.showDialog(mActivity, "Camera not available");
                            else {
                                Intent intent = new Intent(mActivity, BarcodeCaptureActivity.class);
                                intent.putExtra(BarcodeCaptureActivity.AutoFocus, true);

                                startActivityForResult(intent, RC_BARCODE_CAPTURE);
                            }
                            break;

                        default:
                            break;
                    }
                }
            };
    private String mLoginData = null;
    private int chekNoimage;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try {
            mActivity = (AppCompatActivity) getActivity();
            setHasOptionsMenu(true);
            setRetainInstance(false);
            mArgs = getArguments();
            mSavedInstanceState = savedInstanceState;
            mManager = mActivity.getSupportFragmentManager();
            mPreferences = mActivity.getSharedPreferences(AppUtils.SHARED_PREFS, Context.MODE_PRIVATE);
            mEditor = mPreferences.edit();
            imageLoader = ImageLoader.getInstance();
            font = MyApplication.getInstance().getFontInstance();
            receiveComplaintRespond_service = new ReceiveComplaintRespond_Service(mActivity);
            // receiveComplaintRespond_service.setmCallback(this);
            receiveComplaintRespond_service.setmCallbackImages(this);
            mPreferences = mActivity.getSharedPreferences(AppUtils.SHARED_PREFS, Context.MODE_PRIVATE);
            mLoginData = mPreferences.getString(AppUtils.SHARED_LOGIN, null);
            if (mLoginData != null) {
                Gson gson = new Gson();
                Login login = gson.fromJson(mLoginData, Login.class);
                mStrEmpId = login.getEmployeeId();
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public View onCreateView(
            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        Log.d(TAG, "onCreate");
        try {
            rootView = inflater.inflate(R.layout.fragment_ppmdetails_view, container, false);
            initUI(rootView);
            setProperties();

            if (mArgs != null && mArgs.size() > 0) {
                ppmScheduleDocByRequest = mArgs.getParcelable(AppUtils.ARGS_PPMSCHEDULEDOCBYREQUEST);
                getReceiveComplainViewFromService();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return rootView;
    }

    private void initUI(View rootView) {
        Log.d(TAG, "initUI");
        try {
            cl_main = (CoordinatorLayout) mActivity.findViewById(R.id.cl_main);

            tv_lbl_job_no = (TextView) rootView.findViewById(R.id.tv_lbl_job_no);
            tv_lbl_site_name = (TextView) rootView.findViewById(R.id.tv_lbl_site_name);
            tv_lbl_location = (TextView) rootView.findViewById(R.id.tv_lbl_location);
            tv_lbl_zone_area = (TextView) rootView.findViewById(R.id.tv_lbl_zone_area);
            tv_lbl_nature = (TextView) rootView.findViewById(R.id.tv_lbl_nature);
            tv_lbl_startdate = (TextView) rootView.findViewById(R.id.tv_lbl_startdate);
            tv_lbl_enddate = (TextView) rootView.findViewById(R.id.tv_lbl_enddate);
            tv_lbl_assetcode = (TextView) rootView.findViewById(R.id.tv_lbl_assetcode);
            tv_lbl_model = (TextView) rootView.findViewById(R.id.tv_lbl_model);
            tv_lbl_make = (TextView) rootView.findViewById(R.id.tv_lbl_make);
            tv_lbl_assettype = (TextView) rootView.findViewById(R.id.tv_lbl_assettype);
            iv_workdone = (ImageView) rootView.findViewById(R.id.iv_workdone);
            tv_job_no = (TextView) rootView.findViewById(R.id.tv_job_no);
            tv_site_name = (TextView) rootView.findViewById(R.id.tv_site_name);
            tv_location = (TextView) rootView.findViewById(R.id.tv_location);
            tv_zone_area = (TextView) rootView.findViewById(R.id.tv_zone_area);
            tv_nature = (TextView) rootView.findViewById(R.id.tv_nature);
            tv_startdate = (TextView) rootView.findViewById(R.id.tv_startdate);
            tv_enddate = (TextView) rootView.findViewById(R.id.tv_enddate);
            tv_assetcode = (EditText) rootView.findViewById(R.id.tv_assetcode);
            tv_model = (TextView) rootView.findViewById(R.id.tv_model);
            tv_make = (TextView) rootView.findViewById(R.id.tv_make);
            tv_assettype = (TextView) rootView.findViewById(R.id.tv_assettype);
            pb_workdone = (ProgressBar) rootView.findViewById(R.id.pb_workdone);
            btn_barcode_scan = (Button) rootView.findViewById(R.id.btn_barcode_scan);
            btn_save = (Button) rootView.findViewById(R.id.btn_save);
            btn_ppm_checklist = (Button) rootView.findViewById(R.id.btn_ppm_checklist);
            btn_barcode_scan.setOnClickListener(_OnClickListener);
            btn_ppm_checklist.setOnClickListener(_OnClickListener);
            btn_save.setOnClickListener(_OnClickListener);
            // iv_workdone.setEnabled(false);
            setupActionBar();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void submitImage(String docType) {
        try {
            DFoundWDoneImageEntity imageEntity = new DFoundWDoneImageEntity("" + docType);
            imageEntity.setOpco(PpmScheduleDocByUpdate.getCompanyCode());
            imageEntity.setFileType("png");
            imageEntity.setTransactionType("P");
            imageEntity.setDocType(docType);
            imageEntity.setPpmRefNo(PpmScheduleDocByUpdate.getPpmNo());
            imageEntity.setCreatedBy(mStrEmpId);
            imageEntity.setModifiedBy(mStrEmpId);
            imageEntity.setActStartDate(DateFormat.getDateTimeInstance().format(new Date()));
            if (docType.equals("B")) {
                if (mImageToBeAttachedDefectFound != null) {
                    imageEntity.setBase64Image(AppUtils.getEncodedString(mImageToBeAttachedDefectFound));
                    postImageToServer(imageEntity);
                } else {
                    // btn_defect_save.setEnabled(true);
                    // btn_defect_save.setText("Save");
                    AppUtils.hideProgressDialog();
                    AppUtils.showDialog(mActivity, "Please add before ppm image");
                }
            }
           /* else {
                if (mImageToBeAttached != null) {
                    imageEntity.setBase64Image(AppUtils.getEncodedString(mImageToBeAttached));
                    postImageToServer(imageEntity);
                } else {
                    //btn_defect_save.setEnabled(true);
                    //btn_done_save.setText("Save");
                    AppUtils.hideProgressDialog();
                    AppUtils.showDialog(mActivity, "Please add work done image");
                }
            }*/
        } catch (Exception e) {
            //btn_defect_save.setEnabled(true);
            //btn_done_save.setEnabled(true);

            //btn_defect_save.setText("Save");
            // btn_done_save.setText("Save");
            e.printStackTrace();
        }
    }

    private void postImageToServer(DFoundWDoneImageEntity saveRequest) {
        Log.d(TAG, "postImageToServer" + saveRequest.getPpmRefNo());
        mNetworkInfo = mPreferences.getString(AppUtils.IS_NETWORK_AVAILABLE, null);
        if (mNetworkInfo.length() > 0) {
            if (mNetworkInfo.equals(AppUtils.NETWORK_AVAILABLE)) {
                receiveComplaintRespond_service.saveComplaintRespondImageData(saveRequest, getActivity());
            } else {
                new DefectDoneImageDbInitializer(mActivity, saveRequest, this)
                        .execute(AppUtils.MODE_INSERT);
            }
        }
    }

    public void setupActionBar() {
        mToolbar = (Toolbar) mActivity.findViewById(R.id.toolbar);
        mToolbar.setTitle(getResources().getString(R.string.lbl_ppm_details));
        mActivity.setSupportActionBar(mToolbar);
        mActivity.getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        mToolbar.setNavigationOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        mActivity.onBackPressed();
                    }
                });
    }

    private void setProperties() {
        Log.d(TAG, "setProperties");

        tv_lbl_job_no.setTypeface(font.getHelveticaRegular());
        tv_job_no.setTypeface(font.getHelveticaRegular());

        btn_save.setTypeface(font.getHelveticaRegular());
        btn_barcode_scan.setTypeface(font.getHelveticaRegular());
        btn_ppm_checklist.setTypeface(font.getHelveticaRegular());

        btn_save.setOnClickListener(_OnClickListener);
        btn_ppm_checklist.setOnClickListener(_OnClickListener);
        btn_barcode_scan.setOnClickListener(_OnClickListener);

        tv_assetcode.addTextChangedListener(
                new Fragment_PM_PPMDetails_View.MyTextWatcher(tv_assetcode));

        tv_assetcode.setOnEditorActionListener(
                new TextView.OnEditorActionListener() {
                    @Override
                    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                        if (actionId == EditorInfo.IME_ACTION_DONE) {
                            AppUtils.closeInput(cl_main);
                            if (TextUtils.isEmpty(tv_assetcode.getText())) {
                                tv_assetcode.setError(getString(R.string.thisfeildisrequired));
                                tv_assetcode.requestFocus();
                            } else {
                                getBarcodeDetailsService();
                            }
                            return true;
                        }
                        return false;
                    }
                });

        iv_workdone.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                isIvDefectFound = true;
                if (isIvDefectFound) {
                    btn_save.setEnabled(true);
                    if (mImageToBeAttachedDefectFound != null) {
                        if (checkImageLoad) {
                            displayAttachImageDialog();
                        }
                    } else {
                        if (checkImageLoad) {
                            displayAttachImageDialog();
                        }
                    }
                }
            }
        });

        if (mSavedInstanceState != null) {
            Log.d(TAG, " mSavedInstanceState : " + mSavedInstanceState);
            ppmScheduleDocBy = mSavedInstanceState.getParcelable(AppUtils.ARGS_PPMSCHEDULEDOCBY);
            assetDetailsEntity =
                    mSavedInstanceState.getParcelable(AppUtils.ARGS_RECEIVEDCOMPLAINT_ASSET_DETAILS);
            setReceiveComplaintViewValue(ppmScheduleDocBy);
            setReceiveComplaintViewAssetDetailsValue(assetDetailsEntity);
        }
        AppUtils.closeInput(cl_main);
    }

    private void displayAttachImageDialog() {
        if (!isPermissionGranted) {
            getPermissionToReadExternalStorage();
            return;
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(mActivity);
        if (isIvDefectFound) {
            if (mImageToBeAttachedDefectFound != null) {
                items = new CharSequence[]{"Take photo", "Choose photo", "View photo"}; // , "Delete photo"
                builder.setTitle("Add and view photo");
            } else {
                items = new CharSequence[]{"Take photo", "Choose photo", "No image"};
                builder.setTitle("Add  photo");
            }
            builder.setItems(
                    items,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int item) {
                            switch (item) {
                                case 0:
                                    dispatchTakePhotoIntent();
                                    btn_save.setEnabled(true);
                                    btn_save.setBackgroundColor(getResources().getColor(R.color.color_gray));
                                    break;
                                case 1:
                                    dispatchChoosePhotoIntent();
                                    btn_save.setEnabled(true);
                                    btn_save.setBackgroundColor(getResources().getColor(R.color.color_gray));
                                    break;
                                case 2:
                                    for (CharSequence charSequence : items) {
                                        if (charSequence.toString().equalsIgnoreCase("View photo")) {
                                            dispatchViewPhotoIntent();
                                        } else if (charSequence.toString().equalsIgnoreCase("No image")) {
                                            //to check image type
                                            noImageAvailabe();
                                            chekNoimage = 1;
                                        }
                                    }
                                    break;
                            }
                        }
                    });
            builder.show();
        }
    }

    private void noImageAvailabe() {
        AppUtils.showProgressDialog(
                mActivity, getString(R.string.lbl_no_image_uploading), false);
        DFoundWDoneImageEntity imageEntity = new DFoundWDoneImageEntity("" + "B");
        imageEntity.setOpco(PpmScheduleDocByUpdate.getCompanyCode());
        imageEntity.setFileType("png");
        imageEntity.setTransactionType("P");
        imageEntity.setDocType("B");
        imageEntity.setPpmRefNo(PpmScheduleDocByUpdate.getPpmNo());
        imageEntity.setCreatedBy(mStrEmpId);
        imageEntity.setModifiedBy(mStrEmpId);
        imageEntity.setActStartDate(DateFormat.getDateTimeInstance().format(new Date()));
        imageEntity.setBase64Image("noImage");
        postImageToServer(imageEntity);
        iv_workdone.setImageResource(R.drawable.noimage);
    }

    private void dispatchChoosePhotoIntent() {
        Fragment_ImagePicker fragment = new Fragment_ImagePicker();
        fragment.SetImagePickListener(this);
        FragmentTransaction ObjTransaction = mManager.beginTransaction();
        ObjTransaction.add(android.R.id.content, fragment, AppUtils.SHARED_DIALOG_PICKER);
        ObjTransaction.addToBackStack(AppUtils.SHARED_DIALOG_PICKER);
        ObjTransaction.commit();
    }

    private void dispatchTakePhotoIntent() {
        try {
            Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            if (takePictureIntent.resolveActivity(mActivity.getPackageManager()) != null) {
                File photoFile = null;
                try {
                    photoFile = createImageFile();
                } catch (IOException e) {
                    Log.d(TAG, "Cannot create a temp image file", e);
                }

                if (photoFile != null) {
                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(photoFile));
                    startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private File createImageFile() throws IOException {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String fileName = timeStamp + "_";
        File storageDir = mActivity.getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(fileName, ".jpg", storageDir);
        mImagePathToBeAttached = image.getAbsolutePath();
        return image;
    }

    @TargetApi(Build.VERSION_CODES.M)
    public void getPermissionToReadExternalStorage() {
        if (ContextCompat.checkSelfPermission(mActivity, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                if (shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                    // Show our own UI to explain to the user why we need to read the contacts
                    // before actually requesting the permission and showing the default UI
                }
            }
            requestPermissions(
                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
                    REQUEST_WRITE_EXTERNAL_STORAGE);
        } else {
            isPermissionGranted = true;
            displayAttachImageDialog();
        }
    }

    private void dispatchViewPhotoIntent() {
        RCDownloadImage downloadImage = null;
        if (isIvDefectFound) {
            if (mImageToBeAttachedDefectFound == null) {
                AppUtils.showDialog(mActivity, "No image found");
                return;
            } else {
                downloadImage =
                        new RCDownloadImage(AppUtils.getEncodedString(mImageToBeAttachedDefectFound), "B");
            }
        }
        Bundle data = new Bundle();
        data.putParcelable(AppUtils.ARGS_RCDOWNLOADIMAGE, downloadImage);
        Fragment fragment = new Fragment_ImageView();
        fragment.setArguments(data);
        FragmentTransaction fragmentTransaction = mManager.beginTransaction();
        fragmentTransaction.setCustomAnimations(android.R.anim.fade_in, android.R.anim.fade_out);
        fragmentTransaction.replace(R.id.frame_container, fragment, Utils.TAG_RCDOWNLOADIMAGE);
        fragmentTransaction.addToBackStack(Utils.TAG_RCDOWNLOADIMAGE);
        fragmentTransaction.commit();
    }

    private void getBarcodeDetailsService() {
        if (mPreferences
                .getString(AppUtils.IS_NETWORK_AVAILABLE, AppUtils.NETWORK_NOT_AVAILABLE)
                .contains(AppUtils.NETWORK_AVAILABLE)) {
            if (ppmScheduleDocBy != null) {
                AssetDetailsRequest assetDetailsRequest =
                        new AssetDetailsRequest(
                                ppmScheduleDocBy.getCompanyCode(),
                                ppmScheduleDocBy.getJobNo(),
                                ppmScheduleDocBy.getZoneCode(),
                                ppmScheduleDocBy.getBuildTag(),
                                tv_assetcode.getText().toString());
                AppUtils.showProgressDialog(mActivity, getString(R.string.lbl_loading), false);

                new ReceiveComplaintView_Service(mActivity, this)
                        .GetReceiveComplaintViewAssetDetailsData(assetDetailsRequest);

            } else AppUtils.showDialog(mActivity, getString(R.string.lbl_alert_rc_not_available));
        } else {
            Log.d(TAG, "getReceiveComplainViewAssetDetailsFromLocal");
            AssetDetailsEntity entity = new AssetDetailsEntity();
            entity.setAssetBarCode(tv_assetcode.getText().toString());
            new RCAssetDetailsDbInitializer(mActivity, this, entity).execute(AppUtils.MODE_GET);
        }
    }

    private void setReceiveComplaintViewValue(PpmScheduleDocBy complaintViewValue) {
        Log.d(TAG, "setReceiveComplaintViewValue ");
        try {
            if (complaintViewValue != null) {
                this.ppmScheduleDocBy = complaintViewValue;
                if (!TextUtils.isEmpty(complaintViewValue.getJobNo()))
                    tv_job_no.setText(complaintViewValue.getJobNo());
                if (!TextUtils.isEmpty(complaintViewValue.getSiteName()))
                    tv_site_name.setText(complaintViewValue.getSiteName());
                if (!TextUtils.isEmpty(complaintViewValue.getLocation()))
                    tv_location.setText(complaintViewValue.getLocation());
                if (!TextUtils.isEmpty(complaintViewValue.getZoneDescription()))
                    tv_zone_area.setText(complaintViewValue.getZoneDescription());
                if (!TextUtils.isEmpty(complaintViewValue.getNatureDescription()))
                    tv_nature.setText(complaintViewValue.getNatureDescription());
                if (!TextUtils.isEmpty(complaintViewValue.getStartDate()))
                    tv_startdate.setText((complaintViewValue.getStartDate()));
                if (!TextUtils.isEmpty(complaintViewValue.getEndDate()))
                    tv_enddate.setText((complaintViewValue.getEndDate()));

                if (!TextUtils.isEmpty(complaintViewValue.getAssetTypeDesc()))
                    tv_assettype.setText(complaintViewValue.getAssetTypeDesc());
                if (!TextUtils.isEmpty(complaintViewValue.getAssetMake()))
                    tv_make.setText(complaintViewValue.getAssetMake());
                if (!TextUtils.isEmpty(complaintViewValue.getAssetModel()))
                    tv_model.setText(complaintViewValue.getAssetModel());
                if (!TextUtils.isEmpty(complaintViewValue.getAssetBarCode()))
                    tv_assetcode.setText(complaintViewValue.getAssetBarCode());

            } else Log.d(TAG, "setReceiveComplaintViewValue null");

            PpmScheduleDocByUpdate = complaintViewValue;
            mNetworkInfo = mPreferences.getString(AppUtils.IS_NETWORK_AVAILABLE, null);
            if (mNetworkInfo != null && mNetworkInfo.length() > 0) {
                if (mImageToBeAttachedDefectFound == null) {
                    if (mNetworkInfo.equals(AppUtils.NETWORK_AVAILABLE)) {
                        // Download defect found image
                        RCDownloadImageRequest imageRequest = new RCDownloadImageRequest();
                        imageRequest.setOpco(complaintViewValue.getCompanyCode());
                        imageRequest.setDocType("B");
                        imageRequest.setPpmRefNo(complaintViewValue.getPpmNo());
                        pb_workdone.setVisibility(View.VISIBLE);
                        receiveComplaintRespond_service.getRespondImage(imageRequest, getActivity());
                    } else {
                        new DefectDoneImageDbInitializer(
                                mActivity, new DFoundWDoneImageEntity("" + "B"), this)
                                .execute(AppUtils.MODE_GET);
                    }
                } else {
                    iv_workdone.setImageBitmap(
                            ThumbnailUtils.extractThumbnail(
                                    mImageToBeAttachedDefectFound, THUMBNAIL_SIZE, THUMBNAIL_SIZE));
                }
                /*if (mImageToBeAttached == null) {
                    if (mNetworkInfo.equals(AppUtils.NETWORK_AVAILABLE)) {
                        // Download work done image
                        RCDownloadImageRequest doneimageRequest = new RCDownloadImageRequest();
                        doneimageRequest.setOpco(complaintViewValue.getCompanyCode());
                        doneimageRequest.setDocType("A");
                        receiveComplaintRespond_service.getRespondImage(doneimageRequest, getActivity());
                    } else {
                        new DefectDoneImageDbInitializer(
                                mActivity, new DFoundWDoneImageEntity("" + "A"), this)
                                .execute(AppUtils.MODE_GET);
                    }
                } else {
                    iv_workdone.setImageBitmap(
                            ThumbnailUtils.extractThumbnail(
                                    mImageToBeAttached, THUMBNAIL_SIZE, THUMBNAIL_SIZE));
                }*/
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setReceiveComplaintViewAssetDetailsValue(AssetDetailsEntity assetDetailsValue) {
        Log.d(TAG, "setReceiveComplaintViewAssetDetailsValue");
        try {
            if (assetDetailsValue != null) {
                this.assetDetailsEntity = assetDetailsValue;
                if (!TextUtils.isEmpty(assetDetailsValue.getAssetCode())
                        && !assetDetailsValue.getAssetCode().equals("NULL"))
                    tv_assetcode.setText(assetDetailsValue.getAssetBarCode());
                if (!TextUtils.isEmpty(assetDetailsValue.getEquipmentName())
                        && !assetDetailsValue.getEquipmentName().equals("NULL"))
                    tv_assettype.setText(assetDetailsValue.getEquipmentName());
                if (!TextUtils.isEmpty(assetDetailsValue.getAssetMake())
                        && !assetDetailsValue.getAssetMake().equals("NULL"))
                    tv_make.setText(assetDetailsValue.getAssetMake());
                if (!TextUtils.isEmpty(assetDetailsValue.getAssetModel())
                        && !assetDetailsValue.getAssetModel().equals("NULL"))
                    tv_model.setText(assetDetailsValue.getAssetModel());
            } else Log.d(TAG, "setReceiveComplaintViewAssetDetailsValue null");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void gotoNextPage() {


        mSavedInstanceState = getSavedState();
        Bundle data = new Bundle();
        data.putParcelable(AppUtils.ARGS_PPMSCHEDULEDOCBY, ppmScheduleDocBy);
        Fragment_PM_PPMChecklist fragment = new Fragment_PM_PPMChecklist();
        fragment.setArguments(data);
        FragmentTransaction fragmentTransaction = mManager.beginTransaction();
        fragmentTransaction.setCustomAnimations(android.R.anim.fade_in, android.R.anim.fade_out);
        fragmentTransaction.replace(R.id.frame_container, fragment, Utils.TAG_PM_PPMCHECKLIST);
        fragmentTransaction.addToBackStack(Utils.TAG_PM_PPMCHECKLIST);
        fragmentTransaction.commit();
    }

    private void submitForm() {
        Log.d(TAG, "submitForm");
        try {
            AppUtils.closeInput(cl_main);
            if (ppmScheduleDocBy != null) {
                ReceiveComplaintRespondEntity request = new ReceiveComplaintRespondEntity();
        /*  request.setComplaintNumber(complaintViewEntity.getComplaintNumber());
          request.setComplaintSite(complaintViewEntity.getComplaintSite());
          request.setOpco(complaintViewEntity.getOpco());
          request.setFlat(complaintViewEntity.getFlat());
          request.setFloor(complaintViewEntity.getFloor());
          request.setLocationCode(complaintViewEntity.getLocation());
          request.setResponseDate(AppUtils.getDateTime(complaintViewEntity.getComplaintDate()));
        */
                request.setModifiedBy(mStrEmpId);
                if (TextUtils.isEmpty(tv_assetcode.getText().toString())) {
                    tv_assetcode.setError(getString(R.string.lbl_no_barcode_found));
                    tv_assetcode.requestFocus();

                    request.setComplaintStatus("R");
                    postDataToServer(request);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void getReceiveComplainViewFromService() {
        Log.d(TAG, "getReceiveComplainViewFromService");
        try {
            mNetworkInfo = mPreferences.getString(AppUtils.IS_NETWORK_AVAILABLE, null);
            if (mNetworkInfo.length() > 0) {
                if (mNetworkInfo.equals(AppUtils.NETWORK_AVAILABLE)) {
                    Log.d(TAG, "getReceiveComplainViewFromServer");
                    AppUtils.showProgressDialog(mActivity, getString(R.string.lbl_loading), false);
                    new PPMScheduleBy_Service(mActivity, this).getppmData(ppmScheduleDocByRequest);
                } else
                    AppUtils.showDialog(mActivity, getString(R.string.lbl_alert_network_not_available));
            } else
                AppUtils.showDialog(mActivity, getString(R.string.lbl_alert_network_not_available));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void postDataToServer(ReceiveComplaintRespondEntity respondRequest) {
        Log.d(TAG, "postDataToServer");

        mNetworkInfo = mPreferences.getString(AppUtils.IS_NETWORK_AVAILABLE, null);
        if (mNetworkInfo.length() > 0) {
            if (mNetworkInfo.equals(AppUtils.NETWORK_AVAILABLE)) {
                AppUtils.showProgressDialog(mActivity, getString(R.string.lbl_loading), false);
            }
        }
    }

    @Override
    public void onReceiveComplaintRemarksReceived(List<String> remarkList, int mode) {
    }

    public void onReceiveComplaintRespondReceived(String strMsg, String complaintNumber, int mode) {
        Log.d(TAG, "onReceiveComplaintRespondReceived");
        try {

            AppUtils.hideProgressDialog();
            if (strMsg.equalsIgnoreCase("True")) {
                AppUtils.showDialog(getActivity(), strMsg);
                AppUtils.hideProgressDialog();
                setReceiveComplaintViewAssetDetailsValue(assetDetailsEntitiesUp.get(0));
            }
            if (!TextUtils.isEmpty(strMsg)) {
                MaterialDialog.Builder builder =
                        new MaterialDialog.Builder(mActivity)
                                .content(strMsg)
                                .positiveText(R.string.lbl_okay)
                                .stackingBehavior(StackingBehavior.ADAPTIVE)
                                .onPositive(
                                        new MaterialDialog.SingleButtonCallback() {
                                            @Override
                                            public void onClick(
                                                    @NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                                                dialog.dismiss();
                                              /*  Fragment frg = null;
                                                frg =mActivity.getSupportFragmentManager().findFragmentByTag(Utils.TAG_PM_PPMDETAILS_VIEW);
                                                final FragmentTransaction ft = mActivity.getSupportFragmentManager().beginTransaction();
                                                ft.detach(frg);
                                                ft.attach(frg);
                                                ft.commit();*/
                                                // gotoNextPage();
                                            }
                                        });

                MaterialDialog dialog = builder.build();
                dialog.show();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onReceiveComplaintViewReceived(
            List<ReceiveComplaintViewEntity> complaintViewEntities, int mode) {
    }

    @Override
    public void onReceiveComplaintViewReceivedError(String msg, int mode) {
        Log.d(TAG, "onReceiveComplaintViewReceivedError");
        try {
            AppUtils.hideProgressDialog();
            Fragment main = mManager.findFragmentByTag(Utils.TAG_PM_PPMDETAILS_VIEW);
            if (main != null && main.isVisible()) AppUtils.showDialog(mActivity, msg);

            if (msg.equalsIgnoreCase("false")) {
                AppUtils.showDialog(getActivity(), msg);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onReceiveBarCodeAssetReceived(String msg, int mode) {

    }

    @Override
    public void onAllReceiveComplaintData(
            List<ReceiveComplaintRespondEntity> complaintRespondEntities, int modeLocal) {
    }

    @Override
    public void onReceiveComplaintBycomplaintNumber(
            ReceiveComplaintRespondEntity complaintRespondEntity, int modeLocal) {
    }

    @Override
    public void onppmListReceived(List<PpmScheduleDocBy> receiveComplaintItemView, int from) {
        AppUtils.hideProgressDialog();
        Log.d(TAG, "onReceiveComplaintViewReceived" + receiveComplaintItemView.size());
        setReceiveComplaintViewValue(receiveComplaintItemView.get(0));
    }

    @Override
    public void onReceiveComplaintViewAssetDetailsReceived(
            List<AssetDetailsEntity> assetDetailsEntities, int from) {
        Log.d(TAG, "onReceiveComplaintViewAssetDetailsReceived " + assetDetailsEntities.size());
        assetDetailsEntitiesUp = assetDetailsEntities;
        if (ppmScheduleDocBy != null) {
            AssetDetailsRequest assetDetailsRequest =
                    new AssetDetailsRequest(
                            ppmScheduleDocBy.getCompanyCode(),
                            ppmScheduleDocBy.getJobNo(),
                            ppmScheduleDocBy.getZoneCode(),
                            ppmScheduleDocBy.getBuildTag(), assetDetailsEntities.get(0).getAssetCode(), ppmScheduleDocBy.getPpmNo());
            //AppUtils.showProgressDialog(mActivity, getString(R.string.lbl_loading), false);

            new ReceiveComplaintView_Service(mActivity, this)
                    .getAssestBarCodePPM(assetDetailsRequest);

        }

       /* AppUtils.hideProgressDialog();
        setReceiveComplaintViewAssetDetailsValue(assetDetailsEntities.get(0));*/
        if (from == AppUtils.MODE_SERVER) {
            Log.d(TAG, "onReceiveComplaintViewAssetDetailsReceived");
            // new RCAssetDetailsDbInitializer(mActivity,this,assetDetailsEntity).execute(
            // AppUtils.MODE_INSERT_SINGLE);
        }
    }

    @Override
    public void onppmListReceivedError(String strErr, int from) {
        Log.d(TAG, "onReceiveComplaintViewReceivedError");
        try {
            AppUtils.hideProgressDialog();
            Fragment main = mManager.findFragmentByTag(Utils.TAG_RECEIVE_COMPLAINT_VIEW);
            if (main != null && main.isVisible()) AppUtils.showDialog(mActivity, strErr);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
        Log.d(TAG, "onPrepareOptionsMenu ");
        menu.findItem(R.id.action_logout).setVisible(false);
        menu.findItem(R.id.action_home).setVisible(true);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_home:
                Log.d(TAG, "onOptionsItemSelected : home");
                // mActivity.onBackPressed();
                FragmentManager fm = getActivity().getSupportFragmentManager();
                for (int i = 0; i < fm.getBackStackEntryCount(); ++i) {
                    fm.popBackStack();
                }
                Fragment _fragment = new Fragment_Main();
                FragmentTransaction _transaction = mManager.beginTransaction();
                _transaction.setCustomAnimations(android.R.anim.fade_in, android.R.anim.fade_out);
                _transaction.replace(R.id.frame_container, _fragment);
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    /*// Callback with the request from calling requestPermissions(...)
    @Override
    public void onRequestPermissionsResult(
            int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) {

        if (requestCode == REQUEST_WRITE_EXTERNAL_STORAGE) {
            if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                isPermissionGranted = true;
                displayAttachImageDialog();
            } else {

            }

        } else if (requestCode == REQUEST_READ_EXTERNAL_STORAGE) {
            if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                isPermissionGranted = true;
                displayAttachImageDialog();
            } else {

            }

        } else {
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }*/

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        Bitmap thumbnail = null;
        if (requestCode == REQUEST_TAKE_PHOTO) {
            File file = new File(mImagePathToBeAttached);
            if (file.exists()) {
                final BitmapFactory.Options options = new BitmapFactory.Options();
                options.inJustDecodeBounds = true;
                BitmapFactory.decodeFile(mImagePathToBeAttached, options);
                options.inJustDecodeBounds = false;
                if (isIvDefectFound) {
                    mImageToBeAttachedDefectFound = BitmapFactory.decodeFile(mImagePathToBeAttached, options);
                    thumbnail =
                            ThumbnailUtils.extractThumbnail(
                                    mImageToBeAttachedDefectFound, THUMBNAIL_SIZE, THUMBNAIL_SIZE);
                }
                /*else {
                    mImageToBeAttached = BitmapFactory.decodeFile(mImagePathToBeAttached, options);
                    thumbnail =
                            ThumbnailUtils.extractThumbnail(mImageToBeAttached, THUMBNAIL_SIZE, THUMBNAIL_SIZE);
                }*/
                // Delete the temporary image file
                file.delete();
            }
            mImagePathToBeAttached = null;
        } else if (requestCode == REQUEST_CHOOSE_PHOTO) {
            try {
                Uri uri = data.getData();
                ContentResolver resolver = mActivity.getContentResolver();
                if (isIvDefectFound) {
                    mImageToBeAttachedDefectFound = MediaStore.Images.Media.getBitmap(resolver, uri);
                }
               /* else {
                    mImageToBeAttached = MediaStore.Images.Media.getBitmap(resolver, uri);
                }*/
                AssetFileDescriptor asset = resolver.openAssetFileDescriptor(uri, "r");
                thumbnail =
                        ImageUtil.thumbnailFromDescriptor(
                                asset.getFileDescriptor(), THUMBNAIL_SIZE, THUMBNAIL_SIZE);
            } catch (IOException e) {
                Log.d(TAG, "Cannot get a selected photo from the gallery.", e);
            }
        }
        if (thumbnail != null) {
            AppUtils.showProgressDialog(mActivity, "Processing image", false);
            if (isIvDefectFound) {
                if (AppUtils.checkImageFileSize(mImageToBeAttachedDefectFound)) {
                    iv_workdone.setImageBitmap(thumbnail);
                } else {
                    AppUtils.showDialog(mActivity, getString(R.string.file_size_more_then));
                    //iv_workdone.setImageBitmap(thumbnail);
                    // deleteCurrentPhoto();
                }
            }
            AppUtils.hideProgressDialog();
        }
        if (requestCode == RC_BARCODE_CAPTURE) {
            if (resultCode == CommonStatusCodes.SUCCESS) {
                if (data != null) {
                    Barcode barcode = data.getParcelableExtra(BarcodeCaptureActivity.BarcodeObject);
                    tv_assetcode.setText(barcode.displayValue);
                    Log.d(TAG, "Barcode read: " + barcode.displayValue);
                    if (assetDetailsEntity == null) {
                        getBarcodeDetailsService();
                    }
                } else {
                    tv_assetcode.setError(getString(R.string.lbl_no_barcode_captured));
                    Log.d(TAG, "No barcode captured, intent data is null");
                }
            } else {
                tv_assetcode.setError(
                        String.format(
                                getString(R.string.barcode_error),
                                CommonStatusCodes.getStatusCodeString(resultCode)));
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data);
        }
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        Log.d(TAG, "onSaveInstanceState");
        mSavedInstanceState = getSavedState();
    }

    public Bundle getSavedState() {
        Bundle outState = new Bundle();
        outState.putParcelable(AppUtils.ARGS_PPMSCHEDULEDOCBY, ppmScheduleDocBy);
        outState.putParcelable(AppUtils.ARGS_RECEIVEDCOMPLAINT_ASSET_DETAILS, assetDetailsEntity);
        return outState;
    }

    @Override
    public void onSingleImagePicked(String Str_Path) {
        try {
            AppUtils.showProgressDialog(mActivity, "Processing image", false);
            Str_Path = "file://" + Str_Path;
            imageLoader.loadImage(
                    Str_Path,
                    new ImageLoadingListener() {
                        @Override
                        public void onLoadingStarted(String imageUri, View view) {
                        }

                        @Override
                        public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
                        }

                        @Override
                        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                            if (loadedImage != null) {
                                if (isIvDefectFound) {
                                    if (AppUtils.checkImageFileSize(loadedImage)) {
                                        mImageToBeAttachedDefectFound = loadedImage;
                                        iv_workdone.setImageBitmap(
                                                ThumbnailUtils.extractThumbnail(
                                                        loadedImage, THUMBNAIL_SIZE, THUMBNAIL_SIZE));
                                    } else {
                                        AppUtils.showDialog(mActivity, getString(R.string.file_size_more_then));
                                        mImageToBeAttachedDefectFound = loadedImage;
                                        iv_workdone.setImageBitmap(
                                                ThumbnailUtils.extractThumbnail(
                                                        loadedImage, THUMBNAIL_SIZE, THUMBNAIL_SIZE));
                                    }
                                }
                                /*else {
                                    if (AppUtils.checkImageFileSize(loadedImage)) {
                                        mImageToBeAttached = loadedImage;
                                        iv_workdone.setImageBitmap(
                                                ThumbnailUtils.extractThumbnail(
                                                        loadedImage, THUMBNAIL_SIZE, THUMBNAIL_SIZE));
                                    } else {
                                        AppUtils.showDialog(mActivity, getString(R.string.file_size_more_then));
                                        mImageToBeAttached = loadedImage;
                                        iv_workdone.setImageBitmap(
                                                ThumbnailUtils.extractThumbnail(
                                                        loadedImage, THUMBNAIL_SIZE, THUMBNAIL_SIZE));
                                    }
                                }*/
                            }
                            AppUtils.closeInput(cl_main);
                            AppUtils.hideProgressDialog();
                        }

                        @Override
                        public void onLoadingCancelled(String imageUri, View view) {
                        }
                    });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public void onImageSaveReceivedSuccess(DefectDoneImageUploaded mImageEntity, int mode) {
        AppUtils.hideProgressDialog();
        if (chekNoimage == 1) {
            btn_save.setEnabled(false);
            btn_save.setBackgroundColor(getResources().getColor(R.color.color_gray));
        } else {
            btn_save.setEnabled(true);
            AppUtils.showDialog(mActivity, "Data has been successfully Saved.");
        }
        Fragment main = mManager.findFragmentByTag(Utils.TAG_RECEIVE_COMPLAINT_RESPOND);
       /* if (main != null && main.isVisible()) {
            *//*AppUtils.hideProgressDialog();
            AppUtils.showDialog(mActivity, "Data has been successfully Saved.");*//*
        }*/
        /*if (mode == AppUtils.MODE_SERVER) {
            new DefectDoneImageDbInitializer(
                    mActivity,
                    new DFoundWDoneImageEntity(mImageEntity.getComplaintNo() + mImageEntity.getDocType()),
                    this)
                    .execute(AppUtils.MODE_DELETE);
        }*/
    }

    @Override
    public void onImageReceivedSuccess(RCDownloadImage imageEntity, int mode) {
        try {
            checkImageLoad=true;
            if (imageEntity.getBase64Image() != null && imageEntity.getDocType() != null) {
                Log.d(TAG, "getDocType :" + imageEntity.getDocType());
                if (imageEntity.getBase64Image().equalsIgnoreCase("noImage")) {
                    iv_workdone.setImageResource(R.drawable.noimage);
                    btn_save.setEnabled(false);
                } else {
                    btn_save.setEnabled(true);
                    if (imageEntity.getDocType().equals("B")) {
                        mImageToBeAttachedDefectFound = AppUtils.getDecodedString(imageEntity.getBase64Image());
                        iv_workdone.setImageBitmap(
                                ThumbnailUtils.extractThumbnail(
                                        mImageToBeAttachedDefectFound, THUMBNAIL_SIZE, THUMBNAIL_SIZE));
                        pb_workdone.setVisibility(View.GONE);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onImageSaveReceivedFailure(String strErr, int mode) {
        Fragment main = mManager.findFragmentByTag(Utils.TAG_RECEIVE_COMPLAINT_RESPOND);
        if (main != null && main.isVisible()) {
            AppUtils.hideProgressDialog();
            AppUtils.showDialog(mActivity, strErr);
        } else {
            AppUtils.hideProgressDialog();
            AppUtils.showDialog(mActivity, strErr);
        }
    }

    @Override
    public void onImageReceivedFailure(String strErr, int mode) {
        iv_workdone.setEnabled(true);
        checkImageLoad=true;
        if (strErr.toUpperCase().equals("B")) {
            pb_workdone.setVisibility(View.GONE);
        } else pb_workdone.setVisibility(View.GONE);
    }

    @Override
    public void onAllImagesReceived(List<DFoundWDoneImageEntity> mImageEntities, int mode) {

    }

    private class MyTextWatcher implements TextWatcher {

        private TextView tie_view;

        private MyTextWatcher(TextView tie_view) {
            this.tie_view = tie_view;
        }

        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
        }

        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
        }

        public void afterTextChanged(Editable editable) {
            try {
                if (tie_view.getText().toString().trim().isEmpty()) {
                    tv_assetcode.setError(getString(R.string.msg_empty));
                } else {
                    tv_assetcode.setError(null);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}

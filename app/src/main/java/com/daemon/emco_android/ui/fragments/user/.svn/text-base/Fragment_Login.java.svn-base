package com.daemon.emco_android.fragments.user;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.TextInputEditText;
import android.support.design.widget.TextInputLayout;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.TextView;

import com.daemon.emco_android.MyApplication;
import com.daemon.emco_android.R;
import com.daemon.emco_android.activities.MainActivity;
import com.daemon.emco_android.asyncprocess.Url_Service;
import com.daemon.emco_android.asyncprocess.User_Service;
import com.daemon.emco_android.db.dbhelper.ReceiveComplaintItemDbInitializer;
import com.daemon.emco_android.listeners.URLListener;
import com.daemon.emco_android.listeners.UserListener;
import com.daemon.emco_android.model.Login;
import com.daemon.emco_android.model.request.LoginRequest;
import com.daemon.emco_android.model.response.CommonResponse;
import com.daemon.emco_android.utils.AppUtils;
import com.daemon.emco_android.utils.Font;
import com.daemon.emco_android.utils.SessionManager;
import com.daemon.emco_android.utils.Utils;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;

import java.lang.reflect.Field;

import static com.daemon.emco_android.utils.AppUtils.showProgressDialog;

/**
 * Created by vikram on 14/7/17.
 */

public class Fragment_Login extends Fragment implements View.OnClickListener, UserListener,URLListener {
    private static final String TAG = Fragment_Login.class.getSimpleName();
    private AppCompatActivity mActivity;
    private SharedPreferences mPreferences;
    private SharedPreferences.Editor mEditor;
    private Font font = MyApplication.getInstance().getFontInstance();

    private CoordinatorLayout cl_main;
    private Toolbar mToolbar;
    private TextInputLayout til_uname, til_password, til_serverurl;
    private TextInputEditText tie_username, tie_password, tie_serverurl;
    private TextView tv_forgot_password, tv_reg, tv_toolbar_title, tv_user_name;
    private Button btnLogin;
    private Fragment mFragment = null;
    private View rootView;
    private String result="";

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try {
            mActivity = (AppCompatActivity) getActivity();
            setHasOptionsMenu(true);
            setRetainInstance(false);

            mPreferences = mActivity.getSharedPreferences(AppUtils.SHARED_PREFS, Context.MODE_PRIVATE);
            mEditor = mPreferences.edit();
            if (mActivity.getCurrentFocus() != null) {
                InputMethodManager imm = (InputMethodManager) mActivity.getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(mActivity.getCurrentFocus().getWindowToken(), 0);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        Log.d(TAG, "onCreateView");

        rootView = inflater.inflate(R.layout.fragment_login, container, false);
        initView();
        setUpActionBar();
        setProperties();
        AppUtils.closeInput(cl_main);

        return rootView;
    }

    public void initView() {
        Log.d(TAG, "initView");
        try {
            cl_main = (CoordinatorLayout) mActivity.findViewById(R.id.cl_main);
            til_uname = (TextInputLayout) rootView.findViewById(R.id.til_username);
            til_password = (TextInputLayout) rootView.findViewById(R.id.til_password);
            tie_username = (TextInputEditText) rootView.findViewById(R.id.tie_username);
            tie_password = (TextInputEditText) rootView.findViewById(R.id.tie_password);
            tv_forgot_password = (TextView) rootView.findViewById(R.id.tv_forgot_password);
            btnLogin = (Button) rootView.findViewById(R.id.btnLogin);
            tv_reg = (TextView) rootView.findViewById(R.id.tv_reg);
            til_serverurl = (TextInputLayout) rootView.findViewById(R.id.til_serverurl);
            tie_serverurl = (TextInputEditText) rootView.findViewById(R.id.tie_serverurl);
            tv_reg.setOnClickListener(this);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void setUpActionBar() {
        Log.d(TAG, "setActionBar");

        try {

            mToolbar = (Toolbar) mActivity.findViewById(R.id.toolbar);
            tv_toolbar_title = (TextView) mToolbar.findViewById(R.id.tv_toolbar_title);
            // tv_toolbar_title.setText(getString(R.string.lbl_login));
            //mActivity.setContentView(R.layout.toolbar);
            mActivity.setSupportActionBar(mToolbar);
            tv_toolbar_title.setText("");
            // mActivity.getSupportActionBar().setTitle(getString(R.string.lbl_login));
            mActivity.getSupportActionBar().setHomeAsUpIndicator(null);
            mActivity.getSupportActionBar().setDisplayHomeAsUpEnabled(false);

            TextView titleTextView = null;
            try {
                Field f = mToolbar.getClass().getDeclaredField("mTitleTextView");
                f.setAccessible(true);
                titleTextView = (TextView) f.get(mToolbar);
                titleTextView.setTypeface(font.getHelveticaRegular());
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btnLogin:
                // submitFormData();
                validateUrlfromapi();
                break;
            case R.id.tv_forgot_password:
                fragmentTransition(new Fragment_ForgotPassword(), Utils.TAG_FORGOT_PASSWORD);
                break;
            case R.id.tv_reg:
                fragmentTransition(new Fragment_Reg(), Utils.TAG_USER_REG);
                break;
            default:
                break;
        }
    }

    private void setProperties() {

        tie_username.setTypeface(font.getHelveticaRegular());
        tie_password.setTypeface(font.getHelveticaRegular());
        btnLogin.setTypeface(font.getHelveticaRegular());

        tie_username.addTextChangedListener(new MyTextWatcher(tie_username));
        tie_password.addTextChangedListener(new MyTextWatcher(tie_password));
        btnLogin.setOnClickListener(this);
        tv_forgot_password.setOnClickListener(this);

        tie_serverurl.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_ACTION_DONE) {
                    //submitFormData();
                    validateUrlfromapi();
                    return true;
                }
                return false;
            }
        });
    }

    public void validateUrlfromapi() {
        AppUtils.closeInput(cl_main);
        validateUsername();
        validatePassword();
        validUrl();
        if (!validateUsername()) {
            return;
        }
        if (!validatePassword()) {
            return;
        }
        if (!validUrl()) {
            return;
        }
        if (!TextUtils.isEmpty(tie_serverurl.getText().toString())){
            showProgressDialog(mActivity, "Loading...", false);
            new Url_Service(mActivity, this, tie_serverurl.getText().toString().trim()).getURLData();
        }
    }



    public void submitFormData() {
        try {

            /*AppUtils.closeInput(cl_main);
            validateUsername();
            validatePassword();
            validUrl();
            if (!validateUsername()) {
                return;
            }
            if (!validatePassword()) {
                return;
            }
            if (!validUrl()) {
                return;
            }*/

            String loginData = mPreferences.getString(AppUtils.SHARED_LOGIN_OFFLINE, null);
            if (mPreferences.getString(AppUtils.IS_NETWORK_AVAILABLE, AppUtils.NETWORK_NOT_AVAILABLE).contains(AppUtils.NETWORK_AVAILABLE)) {
                showProgressDialog(mActivity, "Loading...", false);
                LoginRequest loginRequest = new LoginRequest(tie_username.getText().toString().trim(), tie_password.getText().toString().trim());
                new User_Service(mActivity, this).getLoginData(loginRequest);
            }
            else if (loginData != null && loginData.length() > 0) {
                Gson gson = new Gson();
                Login login = gson.fromJson(loginData, Login.class);
                Log.d(TAG, "getLoginData " + login.getUserName());
                if (tie_username.getText().toString().equals(login.getUserName()) &&
                        tie_password.getText().toString().equals(login.getPassword())) {

                    mEditor = mPreferences.edit();
                    mEditor.putString(AppUtils.SHARED_LOGIN, mPreferences.getString(AppUtils.SHARED_LOGIN_OFFLINE, null));
                    mEditor.commit();
                    Intent mainActivity = new Intent(mActivity, MainActivity.class);
                    startActivity(mainActivity);
                    mActivity.finish();
                } else {
                    AppUtils.showDialog(mActivity, getString(R.string.lbl_alert_incorrect_username_pwd));
                }
                return;
            }
            else {
                AppUtils.showDialog(mActivity, getString(R.string.lbl_alert_network_not_available));
            }
        } catch (JsonSyntaxException e) {
            e.printStackTrace();
        }
    }

    protected void fragmentTransition(Fragment _fragment, String name) {
        this.mFragment = _fragment;
        FragmentTransaction _fragmentTransaction = mActivity.getSupportFragmentManager().beginTransaction();
        _fragmentTransaction.replace(R.id.frame_container, mFragment, name);
        _fragmentTransaction.addToBackStack(name);
        _fragmentTransaction.commit();
    }

    private boolean validateUsername() {
        /*if (!AppUtils.validateEmail(tie_username.getText().toString().trim()))
        {
            til_uname.setError(getString(R.string.msg_email_violation));
            requestFocus(tie_username);
            return false;
        }
        else */
        if (tie_username.getText().toString().trim().isEmpty()) {
            til_uname.setError(getString(R.string.msg_username_empty));
            return false;
        } else {
            til_uname.setErrorEnabled(false);
        }

        return true;
    }

    private boolean validatePassword() {
        if (tie_password.getText().toString().trim().isEmpty()) {
            til_password.setError(getString(R.string.msg_password_empty));
            requestFocus(tie_password);
            return false;
        } else {
            til_password.setErrorEnabled(false);
        }

        return true;
    }

    private boolean validUrl() {
      /*  if(!AppUtils.isURL(tie_serverurl.getText().toString())){
            til_serverurl.setError(getString(R.string.msg_email_valid_url));
            requestFocus(tie_serverurl);
            return false;
        }*/
        if (tie_serverurl.getText().toString().trim().isEmpty()) {
            til_serverurl.setError(getString(R.string.msg_server_url));
            requestFocus(tie_serverurl);
            return false;
        } else {
            til_serverurl.setErrorEnabled(false);
        }

        return true;
    }

    private void requestFocus(View view) {
        if (view.requestFocus()) {
            mActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
        }
    }

    @Override
    public void onLoginDataReceivedSuccess(Login login, String totalNumberOfRows) {
        Log.d(TAG, "onLoginDataReceivedSuccess");
        AppUtils.hideProgressDialog();
        Gson gson = new GsonBuilder().create();
        String loginJson = gson.toJson(login);
        mEditor.putString(AppUtils.SHARED_LOGIN, loginJson);
        mEditor.commit();
        Log.d(TAG, "ALLFORWARDEDCOMPLAINT" + totalNumberOfRows);
        Intent intent = new Intent(mActivity, MainActivity.class);
        intent.putExtra(AppUtils.ALLFORWARDEDCOMPLAINT, totalNumberOfRows);
        startActivity(intent);
        mActivity.finish();
    }

    @Override
    public void onUserDataReceivedSuccess(CommonResponse response) {

    }

    @Override
    public void onUserDataReceivedFailure(String strErr) {
        try {
            AppUtils.hideProgressDialog();
            AppUtils.showDialog(mActivity, strErr);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onUrlreceivedsucess(CommonResponse response) {
        if (response.getStatus().equals("True")) {
            AppUtils.hideProgressDialog();
            submitFormData();
        }
    }

    @Override
    public void onUrlreceivedFailure(String strErr) {
        try {
            AppUtils.hideProgressDialog();
            AppUtils.showDialog(mActivity, strErr);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private class MyTextWatcher implements TextWatcher {
        private View view;

        private MyTextWatcher(View view) {
            this.view = view;
        }

        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
        }

        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
        }

        public void afterTextChanged(Editable editable) {
            switch (view.getId()) {
                case R.id.tie_username:
                    //validateUsername();
                    break;
                case R.id.tie_password:
                    //validatePassword();
                    break;
            }
        }
    }
}

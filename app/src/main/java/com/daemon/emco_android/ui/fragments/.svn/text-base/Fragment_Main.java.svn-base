package com.daemon.emco_android.fragments;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.CoordinatorLayout;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.afollestad.materialdialogs.DialogAction;
import com.afollestad.materialdialogs.MaterialDialog;
import com.afollestad.materialdialogs.StackingBehavior;
import com.daemon.emco_android.MyApplication;
import com.daemon.emco_android.R;
import com.daemon.emco_android.activities.LoginActivity;
import com.daemon.emco_android.activities.MainActivity;
import com.daemon.emco_android.asyncprocess.FileSize_Service;
import com.daemon.emco_android.db.database.AppDatabase;
import com.daemon.emco_android.db.dbhelper.ReceiveComplaintItemDbInitializer;
import com.daemon.emco_android.fragments.inspection.Fragment_InspectionModule;
import com.daemon.emco_android.fragments.preventive.Fragment_PM_PPMDetails_List;
import com.daemon.emco_android.fragments.reactive.Fragment_RC_List;
import com.daemon.emco_android.fragments.reactive.Fragment_RM_Dashboard;
import com.daemon.emco_android.fragments.reactive.Fragment_RM_LogComplaint;
import com.daemon.emco_android.fragments.reactive.Fragment_RM_LogComplaintUser;
import com.daemon.emco_android.fragments.reactive.Fragment_RM_SearchComplaint;
import com.daemon.emco_android.fragments.reactive.Fragment_ReactiveMaintenance;
import com.daemon.emco_android.fragments.user.Fragment_ViewProfile;
import com.daemon.emco_android.fragments.user.Fragment_ViewProfile_New;
import com.daemon.emco_android.model.Login;
import com.daemon.emco_android.model.request.FileSizeRequest;
import com.daemon.emco_android.utils.AppUtils;
import com.daemon.emco_android.utils.ConnectivityStatus;
import com.daemon.emco_android.utils.Font;
import com.daemon.emco_android.utils.Utils;
import com.google.gson.Gson;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import static com.daemon.emco_android.utils.Utils.TAG_LOG_COMPLAINT;

/**
 * Created by subbu on 25/11/16.
 */
public class Fragment_Main extends Fragment implements View.OnClickListener {
    private static final String TAG = Fragment_Main.class.getSimpleName();

    private AppCompatActivity mActivity;
    private Font font = MyApplication.getInstance().getFontInstance();
    private SharedPreferences mPreferences;
    private SharedPreferences.Editor mEditor;
    private FragmentManager mManager;
    private LinearLayout ll_main_cust, ll_main_tech;
    // private Button  btnProfile;
    private ImageView btnReactive, btnPreventive, btnInspection;
    private Button btnPendingSignature;

    private ImageView btnLogComplaint, btnReceiveComplaint, btnDashboard, btn_view_complaint, btnViewComplaintStatus, profile_action;
    private String mStringJson = null;
    private Bundle mArgs;
    private Gson gson = new Gson();
    private Login user;
    private CoordinatorLayout cl_main;
    private Toolbar mToolbar;
    private TextView tv_toolbar_title, tv_user_name;
    private View rootView = null;
    /*private BroadcastReceiver receiver =
            new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {

                }
            };*/

  /*  int time = 20;
   // Timer t;
    TimerTask task;*/

    private TimerTask mTimerTask;
    final Handler handler = new Handler();
    private Timer t = new Timer();


    @Override
    public void onCreate(Bundle savedInstanceState) {
        Log.d(TAG, "onCreate");
        super.onCreate(savedInstanceState);
        try {
            mActivity = (AppCompatActivity) getActivity();
            mPreferences = mActivity.getSharedPreferences(AppUtils.SHARED_PREFS, Context.MODE_PRIVATE);
            mEditor = mPreferences.edit();
            mStringJson = mPreferences.getString(AppUtils.SHARED_LOGIN, null);
            mManager = mActivity.getSupportFragmentManager();
            font = MyApplication.getInstance().getFontInstance();
            mArgs = getArguments();
            if (mStringJson != null) {
                user = gson.fromJson(mStringJson, Login.class);
            }

            // mActivity.registerReceiver(receiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    /*private void timeout() {
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                try {
                    MaterialDialog.Builder builder =
                            new MaterialDialog.Builder(mActivity)
                                    .content("Your session has been expired!Please login to continue!!! ")
                                    .title("You've timed out")
                                    .positiveText(R.string.lbl_okay)
                                    .stackingBehavior(StackingBehavior.ADAPTIVE)
                                    .onPositive(
                                            new MaterialDialog.SingleButtonCallback() {
                                                @Override
                                                public void onClick(
                                                        @NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                                                    dialog.dismiss();
                                                    clearPreferences();
                                                    Intent intent = new Intent(mActivity, LoginActivity.class);
                                                    mActivity.startActivity(intent);
                                                    mActivity.finish();
                                                }
                                            });

                    MaterialDialog dialog = builder.build();
                    dialog.setCanceledOnTouchOutside(false);
                    dialog.setCancelable(false);
                    dialog.show();

                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        }, AppUtils.TIMEOUT);
    }*/

    public void timeout() {
        mTimerTask = new TimerTask() {
            public void run() {
                handler.post(new Runnable() {
                    public void run() {
                        MaterialDialog.Builder builder =
                                new MaterialDialog.Builder(mActivity).content("Your session has been expired!Please login to continue!!! ")
                                        .title("You've timed out")
                                        .positiveText(R.string.lbl_okay)
                                        .stackingBehavior(StackingBehavior.ADAPTIVE)
                                        .onPositive(
                                                new MaterialDialog.SingleButtonCallback() {
                                                    @Override
                                                    public void onClick(
                                                            @NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                                                        dialog.dismiss();
                                                        clearPreferences();
                                                        Intent intent = new Intent(mActivity, LoginActivity.class);
                                                        mActivity.startActivity(intent);
                                                        mActivity.finish();
                                                    }
                                                });
                        MaterialDialog dialog = builder.build();
                        dialog.setCanceledOnTouchOutside(false);
                        dialog.setCancelable(false);
                        dialog.show();

                    }
                });
            }
        };
        // public void schedule (TimerTask task, long delay, long period)
        t.scheduleAtFixedRate(mTimerTask, AppUtils.TIMEOUT_NEW, AppUtils.TIMEOUT);
    }

    public void cleartime() {
        if (mTimerTask != null) {
            mTimerTask.cancel();
        }
    }


    public void clearPreferences() {
        Log.d(TAG, "clearPreferences");
        try {
            mEditor = mPreferences.edit();
            mEditor
                    .putString(
                            AppUtils.SHARED_LOGIN_OFFLINE, mPreferences.getString(AppUtils.SHARED_LOGIN, null))
                    .commit();
            mEditor.putString(AppUtils.SHARED_LOGIN, null).commit();
            new ReceiveComplaintItemDbInitializer(mActivity, null, null).execute(AppUtils.MODE_DELETE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Nullable
    @Override
    public View onCreateView(
            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        Log.d(TAG, "onCreateView");

        try {
            rootView = (View) inflater.inflate(R.layout.fragment_main, container, false);
            initUI(rootView);
            setProperties();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return rootView;
    }

    private void initUI(View rootView) {
        Log.d(TAG, "initUI");
        try {
            cl_main = (CoordinatorLayout) mActivity.findViewById(R.id.cl_main);
            ll_main_tech = (LinearLayout) rootView.findViewById(R.id.ll_main_tech);
            btnReactive = (ImageView) rootView.findViewById(R.id.btn_reactive_maintenance);
            btnPreventive = (ImageView) rootView.findViewById(R.id.btn_preventive_maintenance);
            btnInspection = (ImageView) rootView.findViewById(R.id.btn_inspection_module);
            //  btnProfile = (Button) rootView.findViewById(R.id.btn_profile);
            tv_user_name = (TextView) rootView.findViewById(R.id.tv_user_name);

            profile_action = (ImageView) rootView.findViewById(R.id.profile_action);

            ll_main_cust = (LinearLayout) rootView.findViewById(R.id.ll_main_cust);
            btnLogComplaint = (ImageView) rootView.findViewById(R.id.btn_log_complaint);
            btnReceiveComplaint = (ImageView) rootView.findViewById(R.id.btn_receive_complaint);
            btnViewComplaintStatus = (ImageView) rootView.findViewById(R.id.btn_view_complaint);
          //  btnPendingSignature = (Button) rootView.findViewById(R.id.btn_pending_client_signature);
            btnDashboard = (ImageView) rootView.findViewById(R.id.btn_dashboard);

            setupActionBar();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void setupActionBar() {
        mToolbar = (Toolbar) mActivity.findViewById(R.id.toolbar);
        tv_toolbar_title = (TextView) mToolbar.findViewById(R.id.tv_toolbar_title);
        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) tv_toolbar_title.getLayoutParams();
        params.setMargins(0, 0, 0, 0);
        tv_toolbar_title.setLayoutParams(params);
        tv_toolbar_title.setText(getString(R.string.title_home));
        mToolbar.setTitle(getResources().getString(R.string.title_home));
        mActivity.setSupportActionBar(mToolbar);
        mActivity.getSupportActionBar().setDisplayHomeAsUpEnabled(false);
    }

    private void setProperties() {
        Log.d(TAG, "setProperties");
        try {
            // btnReactive.setTypeface(font.getHelveticaRegular());
            //btnPreventive.setTypeface(font.getHelveticaRegular());
            //btnInspection.setTypeface(font.getHelveticaRegular());
            //  btnProfile.setTypeface(font.getHelveticaRegular());

            btnReactive.setOnClickListener(this);
            btnPreventive.setOnClickListener(this);
            btnInspection.setOnClickListener(this);
            //   btnProfile.setOnClickListener(this);
            tv_user_name.setOnClickListener(this);
            profile_action.setOnClickListener(this);

            //user name
            tv_user_name.setText(getResources().getText(R.string.lbl_welcome) + " " + user.getFirstName() + " " + user.getLastName());


            if (user.getUserType().equals(AppUtils.TECHNISION)) {
                ll_main_tech.setVisibility(View.VISIBLE);
                ll_main_cust.setVisibility(View.GONE);
                btnInspection.setEnabled(true);
                // btnInspection.setBackgroundColor(getResources().getColor(R.color.colorUnlike));
                //  btnInspection.setBackground(getResources().getDrawable(R.drawable.bg_btn_light));
            } else if (user.getUserType().equals(AppUtils.CUSTOMER)) {
                ll_main_tech.setVisibility(View.GONE);
                ll_main_cust.setVisibility(View.VISIBLE);
            }

            //  btnLogComplaint.setTypeface(font.getHelveticaRegular());
            // btnReceiveComplaint.setTypeface(font.getHelveticaRegular());
            // btnViewComplaintStatus.setTypeface(font.getHelveticaRegular());
           // btnPendingSignature.setTypeface(font.getHelveticaRegular());
            // btnDashboard.setTypeface(font.getHelveticaRegular());

            btnLogComplaint.setOnClickListener(this);
            btnReceiveComplaint.setOnClickListener(this);
            btnViewComplaintStatus.setOnClickListener(this);
          //  btnPendingSignature.setOnClickListener(this);
            btnDashboard.setOnClickListener(this);

            if (user.getUserType().equals(AppUtils.CUSTOMER)) {
                btnReceiveComplaint.setVisibility(View.GONE);
                if (user.getContractNo().equals("*")) {
                    btnDashboard.setVisibility(View.VISIBLE);
                } else btnDashboard.setVisibility(View.GONE);
                // btnReceiveComplaint.setBackground(getResources().getDrawable(R.drawable.bg_btn_light));
            } else btnReceiveComplaint.setVisibility(View.VISIBLE);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btn_reactive_maintenance:
                loadFragment(new Fragment_ReactiveMaintenance(), Utils.TAG_REACTIVE_MAINTENANCE);
                break;
            case R.id.btn_preventive_maintenance:
                loadFragment(new Fragment_PM_PPMDetails_List(), Utils.TAG_PM_PPMDETAILS_LIST);
                break;
            case R.id.btn_inspection_module:
               // loadFragment(new Fragment_InspectionModule(), Utils.TAG_INSPECTIONMODULE);
                break;
            case R.id.tv_user_name:
                loadFragment(new Fragment_ViewProfile_New(), Utils.TAG_VIEW_PROFILE);
                break;
            case R.id.profile_action:
                loadFragment(new Fragment_ViewProfile_New(), Utils.TAG_VIEW_PROFILE);
                break;


     /* case R.id.tv_user_name:
        loadFragment(new Fragment_ViewProfile(), Utils.TAG_VIEW_PROFILE);
        break;*/


            case R.id.btn_log_complaint:
                //if (user.getUserType().equals(AppUtils.CUSTOMER)) {
                loadFragment(new Fragment_RM_LogComplaintUser(), TAG_LOG_COMPLAINT);
                //} else {
                //  loadFragment(new Fragment_RM_LogComplaintUser(), TAG_LOG_COMPLAINT);
                // }
                break;
            case R.id.btn_receive_complaint:
                Bundle data = new Bundle();
                data.putString(
                        AppUtils.ARGS_RECEIVECOMPLAINT_PAGETYPE, AppUtils.ARGS_RECEIVECOMPLAINT_PAGE);
                Fragment_RC_List complaintsList = new Fragment_RC_List();
                complaintsList.setArguments(data);
                loadFragment(complaintsList, Utils.TAG_RECEIVED_COMPALINTS);
                break;
            case R.id.btn_view_complaint:
                loadFragment(new Fragment_RM_SearchComplaint(), Utils.TAG_SINGLE_SEARCH_COMPLAINT);
                break;
           /* case R.id.btn_pending_client_signature:
                Bundle mdata = new Bundle();
                mdata.putString(
                        AppUtils.ARGS_RECEIVECOMPLAINT_PAGETYPE, AppUtils.ARGS_RECEIVECOMPLAINTUNSIGNED_PAGE);
                Fragment_RC_List unsignedcomplaintslist = new Fragment_RC_List();
                unsignedcomplaintslist.setArguments(mdata);
                loadFragment(unsignedcomplaintslist, Utils.TAG_RECEIVED_COMPALINTS);
                break;*/
            case R.id.btn_dashboard:
                loadFragment(new Fragment_RM_Dashboard(), Utils.TAG_DASHBOARD);
                break;
        }
        AppUtils.closeInput(cl_main);
    }

    public void loadFragment(final Fragment fragment, final String tag) {
        Log.d(TAG, "loadFragment");
        // update the main content by replacing fragments
        FragmentTransaction fragmentTransaction =
                mActivity.getSupportFragmentManager().beginTransaction();
        fragmentTransaction.setCustomAnimations(android.R.anim.fade_in, android.R.anim.fade_out);
        fragmentTransaction.replace(R.id.frame_container, fragment, tag);
        fragmentTransaction.addToBackStack(tag);
        fragmentTransaction.commit();
    }

    @Override
    public void onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
        menu.findItem(R.id.action_refresh).setVisible(false);
        menu.findItem(R.id.action_search).setVisible(false);
        menu.findItem(R.id.action_home).setVisible(false);
        // menu.findItem(R.id.action_logout).setVisible(true);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        try {
            List<Fragment> fragments = mManager.getFragments();
            if (fragments != null) {
                for (Fragment fragment : fragments) {
                    fragment.onActivityResult(requestCode, resultCode, data);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_home:
                Log.d(TAG, "onOptionsItemSelected : home");
                mActivity.onBackPressed();
                // mActivity.finish();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onDestroy() {
        AppDatabase.destroyInstance();
        super.onDestroy();
    }

    @Override
    public void onStop() {
        super.onStop();
    }

    @Override
    public void onPause() {
        super.onPause();
        PowerManager pm = (PowerManager) mActivity.getSystemService(Context.POWER_SERVICE);
        boolean isScreenOn = pm.isScreenOn();
        if (!isScreenOn) {
            timeout();
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        PowerManager pm = (PowerManager) mActivity.getSystemService(Context.POWER_SERVICE);
        boolean isScreenOn = pm.isScreenOn();
        if (isScreenOn) {
            cleartime();
        }
    }
}
